{% raw %}
if [ "$PS1" != "" -a "${STARTED_TMUX:-x}" = x -a "${SSH_TTY:-x}" != x ]
then
    STARTED_TMUX=1; export STARTED_TMUX
    sleep 1
    ( (tmux has-session -t $USER && tmux attach-session -t $USER) || (tmux new-session -s $USER) ) && exit 0
    echo "tmux failed to start"
fi
# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Uncomment this to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment following line if you want to  shown in the command execution time stamp
# in the history command output. The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|
# yyyy-mm-dd
# HIST_STAMPS="mm/dd/yyyy"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)

plugins=(autojump bower colorize)

fpath=(/usr/local/share/zsh-completions $fpath)

source $ZSH/oh-my-zsh.sh
source /usr/local/bin/virtualenvwrapper.sh

# User configuration

export PATH=/usr/local/bin:/usr/local/sbin:$HOME/bin:$PATH
export VIRTUAL_ENV_DISABLE_PROMPT=1
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME
export EDITOR=$(which vim)

local return_code="%(?..%{$fg[red]%}%? ↵%{$reset_color%})"
local time=$'%{$terminfo[bold]$fg[green]%}[%D{%Y-%m-%d %H:%M:%S}]%{$reset_color%}'
{% endraw %}
local letter='%{$terminfo[bold]$fg[magenta]{{ '%}' }}{{ hostname }}%{$reset_color{{ '%}' }}'
{% raw %}
local current_dir='%{$terminfo[bold]$fg[blue]%} %~%{$reset_color%}'
local git_branch='$(git_prompt_info)%{$reset_color%}'

function virtualenv_ind {
    if [[ -z $VIRTUAL_ENV ]] then
        psvar[1]='$'
    else
        psvar[1]='.'
    fi
}

add-zsh-hook precmd virtualenv_ind

TMOUT=1

TRAPALRM() {
    zle reset-prompt
}

PROMPT="╭─${time} ${letter} ${current_dir} ${git_branch} ${venv}
╰─%B%1v%b "
RPS1="${return_code}"

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[yellow]%}‹"
ZSH_THEME_GIT_PROMPT_SUFFIX="› %{$reset_color%}"

ve() {
    typeset venv
    venv="${PWD##*/}"
    if [[ "${VIRTUAL_ENV:t}" != "$venv" ]]; then
        if workon | grep -q "$venv"; then
            workon "$venv"
        else
            echo -n "Create virtualenv $venv now? (yn) "
            read answer
            if [[ "$answer" == "y" ]]; then
                mkvirtualenv "$venv"
            fi
        fi
    else
        deactivate
    fi
}

mdc () {
        mkdir -p "$@" && cd "$@"
}

pd() {
    Gprof2dot -f pstats $1.prof | dot -Tpng -o $1.png 2>/dev/null && open $1.png
}

# # Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"
{% endraw %}

